import java_cup.runtime.*;
import java.io.*;

// Código adicional para inicializar o parser
parser code {:
    scanner s;
    parser(scanner s) { this.s = s; } // Construtor do parser que aceita o scanner
:}

// Definindo a integração do scanner com CUP
scan with {:
        return s.next_token(); 
:};

// Terminais definidos pelo analisador léxico 
terminal String IDENTIFICADOR; 

// TIPOS 
terminal String TIPO_INT, TIPO_FLOAT, TIPO_STRING, TIPO_BOOL; 

// PALAVRAS-CHAVE 
terminal String KEY_IF, KEY_ELSE, KEY_FOR, KEY_WHILE, KEY_PUBLIC, KEY_PRIVATE, KEY_RETURN, KEY_VOID; 

// OPERADORES 
terminal String OP_MAIS, OP_MINUS, OP_MULTI, OP_DIVI, OP_IGUAL, OP_DIFE, OP_MENORQ, OP_MAIORQ, OP_MAIOR_IGUAL, OP_MENOR_IGUAL, IGUALDADE; 

// DELIMITADORES 
terminal String DL_END, DL_LPAREN, DL_RPAREN, DL_LCHAVE, DL_RCHAVE, DL_VIRGUL; 

// NUMEROS
terminal Integer NUMERO_INT; 
terminal Double NUMERO_FLOAT; 

// Não terminais 
non terminal program, statements, statement; 
non terminal decl_function, decl_variavel, decl_parametros, decl_if, decl_laco_repeticao; 
non terminal variavel, function, casos_if; 
non terminal parametro, bloco, condicional, retorno; 
non terminal termos, valor, expressao; 
non terminal tipo, tipo_function; 
non terminal operacoes, operadores, operadores_math; 

// Produção principal 
program ::= statements {: System.out.println("Program"); :} 
        ;

statements ::= statements statement {: System.out.println("Statements múltiplos"); :} 
        | statement {: System.out.println("Único statement"); :} 
        ; 

statement ::= decl_function {: System.out.println("statement_function"); :} 
        | decl_variavel {: System.out.println("statement_variavel"); :} 
        | decl_if {: System.out.println("statement_if"); :} 
        | decl_laco_repeticao {: System.out.println("statement_laco_repeticao"); :} 
        | retorno {: System.out.println("statement_retorno"); :} 
        | expressao DL_END {: System.out.println("statement_expressao"); :} 
        ; 

// VARIAVEL 
decl_variavel ::= variavel:v DL_END {: System.out.println(v); :} 
        ; 

variavel ::= tipo:t IDENTIFICADOR:i IGUALDADE termos:v {: RESULT = "Identificou a variável: " + t + " " + i + " = " + v + ";"; :} 
        ; 

// FUNCTION 
decl_function ::= function:f {: System.out.println(f); :} 
        ; 

function ::= tipo_function:t tipo:r IDENTIFICADOR:i DL_LPAREN decl_parametros:p DL_RPAREN bloco {: RESULT = "Identificou a função: " + t + " " + r + " " + i + "(" + p +") { }" ; :} 
        ; 
        
// PARAMETROS 
decl_parametros ::= parametro:x DL_VIRGUL parametro:y {: RESULT = x + ", " + y; System.out.println("Parametros: " + x + ", " + y); :} 
        | parametro:x {: RESULT = x; System.out.println("Parametro: " + x); :} 
        ; 

parametro ::= tipo:t IDENTIFICADOR:i {: RESULT = t + " " + i; System.out.println("Identificou o parametro: " + t + " " + i); :} 
        ; 

// IF 
decl_if ::= casos_if bloco KEY_ELSE bloco {: System.out.println("decl_if_com_else"); :} 
        | casos_if bloco {: System.out.println("decl_if11"); :} 
        ; 

casos_if ::= KEY_IF DL_LPAREN condicional DL_RPAREN {: System.out.println("casos_if"); :} 
        ; 

// LACO DE REPETICAO 
decl_laco_repeticao ::= KEY_FOR DL_LPAREN variavel DL_END condicional DL_END expressao DL_RPAREN bloco {: System.out.println("Identificou o laço 'for' de repetição;"); :} 
        | KEY_WHILE DL_LPAREN condicional DL_RPAREN bloco {: System.out.println("Identificou o laço 'while' de repetição;"); :} 
        ; 

condicional ::= termos operadores termos {: System.out.println("condicional"); :} 
        ; 

termos ::= IDENTIFICADOR:t {: RESULT = t; System.out.println("Termo:" + t); :} 
        | valor:t {: RESULT = t; System.out.println("Termo:" + t); :} 
        ; 

retorno ::= KEY_RETURN termos:x DL_END {: System.out.println("Identificou o retorno: return " + x + ";"); :} 
        ; 
        
expressao ::= IDENTIFICADOR:x OP_MAIS OP_MAIS {: System.out.println("Identificou a expressão: " + x + "++;"); :} 
        | IDENTIFICADOR:x IGUALDADE operacoes:y {: System.out.println("Identificou a expressão: " + x + " = " + y + " ;"); :} 
        ; 

operacoes ::= termos:t operadores_math:y termos:u {: System.out.println("Identificou a operação: "+t+" "+y+" "+u); :} 
        ; 

// UTILS 
bloco ::= DL_LCHAVE statements DL_RCHAVE {: System.out.println("bloco"); :} 
        ; 

valor ::= NUMERO_INT:v {:RESULT = v; System.out.println("Valor inteiro: " + v); :} 
        | NUMERO_FLOAT:v {: RESULT = v; System.out.println("Valor float: " + v); :} 
        ; 

tipo ::= TIPO_INT:t {: System.out.println("Tipo: " + t); RESULT = t; :} 
        | TIPO_FLOAT:t {: System.out.println("Tipo: " + t); RESULT = t; :} 
        | TIPO_STRING:t {: System.out.println("Tipo: " + t); RESULT = t; :} 
        | TIPO_BOOL:t {: System.out.println("Tipo: " + t); RESULT = t; :} 
        | KEY_VOID:t {: System.out.println("Tipo: " + t); RESULT = t; :} 
        ; 

tipo_function ::= KEY_PUBLIC:t {: System.out.println("Tipo de Função: " + t); RESULT = t; :} 
        | KEY_PRIVATE:t {: System.out.println("Tipo de Função: " + t); RESULT = t; :} 
        ; 

operadores_math ::= OP_MAIS:r {: System.out.println("Operador: " + r); RESULT = r; :} 
        | OP_MINUS:r {: System.out.println("Operador: " + r); RESULT = r; :} 
        | OP_MULTI:r {: System.out.println("Operador: " + r); RESULT = r; :} 
        | OP_DIVI:r {: System.out.println("Operador: " + r); RESULT = r; :} 
        ; 

operadores ::= OP_IGUAL:r {: RESULT = r; System.out.println("Operador: " + r); :} 
        | OP_DIFE:r {: RESULT = r; System.out.println("Operador: " + r); :} 
        | OP_MENORQ:r {: RESULT = r; System.out.println("Operador: " + r); :} 
        | OP_MAIORQ:r {: RESULT = r; System.out.println("Operador: " + r); :} 
        | OP_MAIOR_IGUAL:r {: RESULT = r; System.out.println("Operador: " + r); :} 
        | OP_MENOR_IGUAL:r {: RESULT = r; System.out.println("Operador: " + r); :}
        ;