import java_cup.runtime.*;
import java.io.*;

// Código adicional para inicializar o parser
parser code {:
    scanner s;
    parser(scanner s) { this.s = s; } // Construtor do parser que aceita o scanner
:}

// Definindo a integração do scanner com CUP
scan with {:
        return s.next_token(); 
        :};

// Terminais definidos pelo analisador léxico
terminal ESPACO_BRANCO;
terminal String IDENTIFICADOR, TIPO_INT, TIPO_FLOAT, TIPO_STRING, TIPO_BOOL, KEY_VOID;

// PALAVRAS-CHAVE
terminal String KEY_IF, KEY_ELSE, KEY_WHILE, KEY_FOR, KEY_CLASS, KEY_PUBLIC, KEY_PRIVATE, KEY_RETURN;

// OPERADORES
terminal String OP_MAIS, OP_MINUS, OP_MULTI, OP_DIVI, OP_IGUAL, OP_DIFE, OP_MENORQ, OP_MAIORQ, OP_MAIOR_IGUAL, OP_MENOR_IGUAL, IGUALDADE;

// DELIMITADORES
terminal String DL_END, DL_LPAREN, DL_RPAREN, DL_LCHAVE, DL_RCHAVE, DL_VIRGUL;

// Comentários
terminal COMENT_SINGLE, COMENT_MULTI;

terminal Integer NUMERO_INT;
terminal Double NUMERO_FLOAT;

// Não terminais
non terminal program, statements, statement, statement_function;
non terminal function, variavel, decl_call_function, decl_parametros, decl_if ; 
non terminal condicional;
non terminal parametro;
non terminal bloco;
non terminal termo;
non terminal valor;
non terminal tipo;
non terminal tipoFunction;
non terminal operadores;
non terminal operadoresMath;
non terminal parentese, chaves;

// Produção principal
program ::= statements {: System.out.println("Program"); :}
        ;

statements ::= statements statement {: System.out.println("statements____"); :}
        | statement {: System.out.println("statements"); :}
        ;

statement ::= function {: System.out.println("statement_function"); :}
        | variavel {: System.out.println("statement_variavel"); :}
        | decl_call_function {: System.out.println("statement_call"); :}
        ;

function ::= tipoFunction tipo parentese decl_parametros parentese {: System.out.println("function"); :}
        ;

decl_parametros ::= parametro DL_VIRGUL parametro {: System.out.println("decl_parametros-2"); :} 
        | parametro:x {: RESULT = x; System.out.println("decl_parametros-1"); :} 
        | 
        ;

parametro ::= tipo:t IDENTIFICADOR:i {: RESULT = t + " " + i;  System.out.println("parametros"); :}
        ;

statement_function ::= statement_function decl_if | decl_if;

decl_if ::= KEY_IF parentese condicional parentese bloco
        | decl_if KEY_ELSE bloco
        ;

condicional ::= termo operadores termo {: System.out.println("condicional"); :}
        ;

termo ::= IDENTIFICADOR:t {: RESULT = t; System.out.println("termo:" + t); :}
        | valor:t {: RESULT = t; System.out.println("termo:" + t); :}
        ;

bloco ::= chaves statements chaves {: System.out.println("bloco"); :}
        ;

variavel ::= tipo:t IDENTIFICADOR:i IGUALDADE valor:v DL_END {: System.out.println("Declaração de variável: " + t + " " + i + " = " + v); :}
        ;

valor ::= NUMERO_INT:v {: System.out.println("Valor inteiro: " + v); RESULT = v; :}
        | NUMERO_FLOAT:v {: System.out.println("Valor float: " + v); RESULT = v; :}
        ;

tipo ::= TIPO_INT:t {: System.out.println("Tipo: " + t); RESULT = t; :}
        | TIPO_FLOAT:t {: System.out.println("Tipo: " + t); RESULT = t; :}
        | TIPO_STRING:t {: System.out.println("Tipo: " + t); RESULT = t; :}
        | TIPO_BOOL:t {: System.out.println("Tipo: " + t); RESULT = t; :}
        | KEY_VOID:t {: System.out.println("Tipo: " + t); RESULT = t; :}
        ;

tipoFunction ::= KEY_PUBLIC:t {: System.out.println("Tipo de Função: " + t); RESULT = t; :}
        | KEY_PRIVATE:t {: System.out.println("Tipo de Função: " + t); RESULT = t; :}
        ;

operadoresMath ::= OP_MAIS:r {: System.out.println("Operador: " + r); RESULT = r; :}
        | OP_MINUS:r {: System.out.println("Operador: " + r); RESULT = r; :}
        | OP_MULTI:r {: System.out.println("Operador: " + r); RESULT = r; :}
        | OP_DIVI:r {: System.out.println("Operador: " + r); RESULT = r; :}
        ;

operadores ::= OP_IGUAL:r {: RESULT = r; System.out.println("Operador: " + r); :}
        | OP_DIFE:r {: RESULT = r; System.out.println("Operador: " + r); :}
        | OP_MENORQ:r {: RESULT = r; System.out.println("Operador: " + r); :}
        | OP_MAIORQ:r {: RESULT = r; System.out.println("Operador: " + r); :}
        | OP_MAIOR_IGUAL:r {: RESULT = r; System.out.println("Operador: " + r); :}
        | OP_MENOR_IGUAL:r {: RESULT = r; System.out.println("Operador: " + r); :}
        ;

parentese ::= DL_LPAREN:r {: RESULT = r; System.out.println("Parentese: " + r); :}
        | DL_RPAREN:r {: RESULT = r; System.out.println("Parentese: " + r); :}
        ;

chaves ::= DL_LCHAVE:r {: RESULT = r; System.out.println("Chaves: " + r); :}
        | DL_RPAREN:r {: RESULT = r; System.out.println("Chaves: " + r); :}
        ;